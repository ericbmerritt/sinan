-module(sin_app_src).

-include_lib("eunit/include/eunit.hrl").

-export([given/3, 'when'/3, then/3]).

given([a, generated, project, that, contains, an, 'ebin/app'],
      _State, _) ->
    {ok, BaseDir} = ewl_file:create_tmp_dir("/tmp"),
    ProjectName = "super_foo",
    {ProjectDir, _} =
        sin_test_project_gen:single_app_project(BaseDir, ProjectName),
    {ok, {ProjectDir, ProjectName}};
given([a,generated,project,that,contains,an,'app.src'], _State, _) ->
      {ok, BaseDir} = ewl_file:create_tmp_dir("/tmp"),
    ProjectName = "super_foo",
    {ProjectDir, _} =
        sin_test_project_gen:single_app_project(BaseDir, ProjectName),
    AppSrcPath = filename:join([ProjectDir, "src",
                                ProjectName ++ ".app.src"]),
    ?assertMatch(ok, file:write_file(AppSrcPath, app_src(ProjectName))),
    {ok, {ProjectDir, ProjectName}};
given([does,'not',contain,an,'ebin/app'],
      State = {ProjectDir, ProjectName}, _) ->
    AppSrc = filename:join([ProjectDir, "ebin", ProjectName ++ ".app"]),
    ?assertMatch(ok, delete_if_exists(AppSrc)),
    {ok, State};
given([does,'not',contain,an,'app.src'],
      State = {ProjectDir, ProjectName}, _) ->
    AppSrc = filename:join([ProjectDir, "src", ProjectName ++ ".app.src"]),
    ?assertMatch(ok, delete_if_exists(AppSrc)),
    {ok, State};
given([contains,an,'ebin/app'],
      State = {ProjectDir, ProjectName}, _) ->
    %% Generated by default so lets just make sure it exists
    AppSrc = filename:join([ProjectDir, "ebin", ProjectName ++ ".app"]),
    ?assertMatch(true,
                 sin_utils:file_exists(sin_config:new(), AppSrc)),
    {ok, State}.

'when'([a, build, step, is, run, on, this, project],
       {ProjectDir, ProjectName}, _) ->
    Ret = sinan:run_sinan(["-s", ProjectDir, "build"]),
    ?assertMatch({_, _}, Ret),
    {_, TrueRet} = Ret,
    {ok, {ProjectDir, ProjectName, TrueRet}}.

then([build, the, app, normally], State = {_, _, BuildState}, _) ->
    ?assertMatch([], sin_config:get_run_errors(BuildState)),
    {ok, State};
then([the, build, should, fail], State = {_, _, BuildState}, _) ->
    ?assertMatch(1,  erlang:length(sin_config:get_run_errors(BuildState))),
    {ok, State};
then([sinan, should, put, the, app, file, in, 'ebin/.app'],
     State = {_, ProjectName, BuildState}, _) ->
    verify_ebin_app(ProjectName, BuildState),
    {ok, State};
then([sinan, should, warn, the, user, that,
      both, an, 'ebin/app', 'and', 'app.src', exists],
     State = {ProjectDir, _, BuildState}, _) ->
    ?assertMatch(
       [{sin_discover,
         {sin_discover, _,
          {"conflict: ~s has both an ebin/*.app and a src/*.app.src ",
           [ProjectDir]}}}],
       sin_config:get_run_errors(BuildState)),
    {ok, State};
then([warn, the, user, that, the,
      'ebin/app', is, being, ignored],
     State = {_, _, BuildState}, _) ->
    Warnings = sin_config:get_run_warnings(BuildState),
    ?assertMatch(true,
                 lists:any(fun({sin_discover, Warning}) ->
                                   case Warning of
                                       "Unexpected ebin/.app overriding with src/app.src" ->
                                           true;
                                       _ ->
                                           false
                                   end;
                              (_) ->
                                   false
                           end, Warnings)),
                 {ok, State}.

app_src(Name) ->
    ["%% This is the application resource file (.app file) for the app2,\n"
     "%% application.\n"
     "{application, ", Name, ",\n"
     "[{description, \"Your Desc HERE\"},\n"
     "  {vsn, \"0.1.0\"},\n"
     "  {modules, [", Name, "_app,\n"
     "             ", Name, "_sup]},\n"
     "  {registered,[", Name, "_sup]},\n"
     "  {applications, [kernel, stdlib]},\n"
     "  {mod, {", Name, "_app,[]}}, \n"
     "  {start_phases, []}]}.\n"].

delete_if_exists(Path) ->
    case file:delete(Path) of
        ok ->
            ok;
        {error, enoent} ->
            ok;
        Error ->
            throw(Error)
    end.

verify_ebin_app(ProjectName, BuildState) ->
    BaseDir = sin_config:get_value(BuildState,
                                   "apps." ++ ProjectName ++ ".builddir"),
    BasePath = filename:join([BaseDir, "ebin", ProjectName ++
                                  ".app"]),
    ?assertMatch(true,
                 sin_utils:file_exists(sin_config:new(), BasePath)),
    AppContents = file:consult(BasePath),
    AtomName =  erlang:list_to_atom(ProjectName),
    ?assertMatch({ok, [{application, AtomName, _}]}, AppContents),
    {ok, [{_, _, Details}]} = AppContents,
    ?assertMatch({vsn, "0.1.0"}, lists:keyfind(vsn, 1, Details)),
    Details.
